/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IVPOOracleInterface extends Interface {
  getFunction(
    nameOrSignature: "getResult" | "requestResolve"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ResolveFulfilled" | "ResolveRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getResult",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestResolve",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestResolve",
    data: BytesLike
  ): Result;
}

export namespace ResolveFulfilledEvent {
  export type InputTuple = [
    marketId: BytesLike,
    resultData: BytesLike,
    metadata: BytesLike
  ];
  export type OutputTuple = [
    marketId: string,
    resultData: string,
    metadata: string
  ];
  export interface OutputObject {
    marketId: string;
    resultData: string;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResolveRequestedEvent {
  export type InputTuple = [
    marketId: BytesLike,
    requester: AddressLike,
    extraData: BytesLike
  ];
  export type OutputTuple = [
    marketId: string,
    requester: string,
    extraData: string
  ];
  export interface OutputObject {
    marketId: string;
    requester: string;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVPOOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IVPOOracle;
  waitForDeployment(): Promise<this>;

  interface: IVPOOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getResult: TypedContractMethod<
    [marketId: BytesLike],
    [
      [boolean, string, string] & {
        resolved: boolean;
        resultData: string;
        metadata: string;
      }
    ],
    "view"
  >;

  requestResolve: TypedContractMethod<
    [marketId: BytesLike, extraData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getResult"
  ): TypedContractMethod<
    [marketId: BytesLike],
    [
      [boolean, string, string] & {
        resolved: boolean;
        resultData: string;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestResolve"
  ): TypedContractMethod<
    [marketId: BytesLike, extraData: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ResolveFulfilled"
  ): TypedContractEvent<
    ResolveFulfilledEvent.InputTuple,
    ResolveFulfilledEvent.OutputTuple,
    ResolveFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "ResolveRequested"
  ): TypedContractEvent<
    ResolveRequestedEvent.InputTuple,
    ResolveRequestedEvent.OutputTuple,
    ResolveRequestedEvent.OutputObject
  >;

  filters: {
    "ResolveFulfilled(bytes32,bytes,bytes)": TypedContractEvent<
      ResolveFulfilledEvent.InputTuple,
      ResolveFulfilledEvent.OutputTuple,
      ResolveFulfilledEvent.OutputObject
    >;
    ResolveFulfilled: TypedContractEvent<
      ResolveFulfilledEvent.InputTuple,
      ResolveFulfilledEvent.OutputTuple,
      ResolveFulfilledEvent.OutputObject
    >;

    "ResolveRequested(bytes32,address,bytes)": TypedContractEvent<
      ResolveRequestedEvent.InputTuple,
      ResolveRequestedEvent.OutputTuple,
      ResolveRequestedEvent.OutputObject
    >;
    ResolveRequested: TypedContractEvent<
      ResolveRequestedEvent.InputTuple,
      ResolveRequestedEvent.OutputTuple,
      ResolveRequestedEvent.OutputObject
    >;
  };
}
