/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MarketFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "computeMarketId"
      | "createMarket"
      | "feeRecipient"
      | "flatFee"
      | "oracle"
      | "setAdmin"
      | "setFeeRecipient"
      | "setFlatFee"
      | "setOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminUpdated"
      | "FeeRecipientUpdated"
      | "FlatFeeUpdated"
      | "MarketDeployed"
      | "OracleUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "computeMarketId",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "flatFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlatFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flatFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFlatFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
}

export namespace AdminUpdatedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientUpdatedEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlatFeeUpdatedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketDeployedEvent {
  export type InputTuple = [
    marketId: BytesLike,
    market: AddressLike,
    vault: AddressLike,
    question: string,
    endTime: BigNumberish,
    feeBps: BigNumberish,
    flatFee: BigNumberish,
    feeRecipient: AddressLike
  ];
  export type OutputTuple = [
    marketId: string,
    market: string,
    vault: string,
    question: string,
    endTime: bigint,
    feeBps: bigint,
    flatFee: bigint,
    feeRecipient: string
  ];
  export interface OutputObject {
    marketId: string;
    market: string;
    vault: string;
    question: string;
    endTime: bigint;
    feeBps: bigint;
    flatFee: bigint;
    feeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MarketFactory;
  waitForDeployment(): Promise<this>;

  interface: MarketFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  computeMarketId: TypedContractMethod<
    [creator: AddressLike, question: string, endTime: BigNumberish],
    [string],
    "view"
  >;

  createMarket: TypedContractMethod<
    [
      collateral: AddressLike,
      question: string,
      endTime: BigNumberish,
      feeBps: BigNumberish
    ],
    [[string, string] & { market: string; vault: string }],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  flatFee: TypedContractMethod<[], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  setAdmin: TypedContractMethod<[admin_: AddressLike], [void], "nonpayable">;

  setFeeRecipient: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setFlatFee: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  setOracle: TypedContractMethod<[oracle_: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "computeMarketId"
  ): TypedContractMethod<
    [creator: AddressLike, question: string, endTime: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [
      collateral: AddressLike,
      question: string,
      endTime: BigNumberish,
      feeBps: BigNumberish
    ],
    [[string, string] & { market: string; vault: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "flatFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[admin_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFlatFee"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[oracle_: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminUpdated"
  ): TypedContractEvent<
    AdminUpdatedEvent.InputTuple,
    AdminUpdatedEvent.OutputTuple,
    AdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientUpdated"
  ): TypedContractEvent<
    FeeRecipientUpdatedEvent.InputTuple,
    FeeRecipientUpdatedEvent.OutputTuple,
    FeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FlatFeeUpdated"
  ): TypedContractEvent<
    FlatFeeUpdatedEvent.InputTuple,
    FlatFeeUpdatedEvent.OutputTuple,
    FlatFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketDeployed"
  ): TypedContractEvent<
    MarketDeployedEvent.InputTuple,
    MarketDeployedEvent.OutputTuple,
    MarketDeployedEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminUpdated(address)": TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;
    AdminUpdated: TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;

    "FeeRecipientUpdated(address)": TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;
    FeeRecipientUpdated: TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;

    "FlatFeeUpdated(uint256)": TypedContractEvent<
      FlatFeeUpdatedEvent.InputTuple,
      FlatFeeUpdatedEvent.OutputTuple,
      FlatFeeUpdatedEvent.OutputObject
    >;
    FlatFeeUpdated: TypedContractEvent<
      FlatFeeUpdatedEvent.InputTuple,
      FlatFeeUpdatedEvent.OutputTuple,
      FlatFeeUpdatedEvent.OutputObject
    >;

    "MarketDeployed(bytes32,address,address,string,uint256,uint16,uint256,address)": TypedContractEvent<
      MarketDeployedEvent.InputTuple,
      MarketDeployedEvent.OutputTuple,
      MarketDeployedEvent.OutputObject
    >;
    MarketDeployed: TypedContractEvent<
      MarketDeployedEvent.InputTuple,
      MarketDeployedEvent.OutputTuple,
      MarketDeployedEvent.OutputObject
    >;

    "OracleUpdated(address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
  };
}
